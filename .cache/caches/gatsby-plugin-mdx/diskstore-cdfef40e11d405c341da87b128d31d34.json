{"expireTime":9007200878832069000,"key":"gatsby-plugin-mdx-entire-payload-af1d7a99da4a6189d78aa7e03faf9ba6--undefined","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"JavaScript code with line numbers.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":35,"offset":35},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":35,"offset":35},"indent":[]}},{"type":"jsx","value":"<CodeHighlight\n  language=\"javascript\"\n  showLineNumbers\n>{`result.data.allFile.nodes.forEach((node) => {\n  actions.createPage({\n    path: node.fields.path,\n    component: require.resolve(\"./src/templates/post.js\"),\n    context: { id: node.id },\n  })\n})`}</CodeHighlight>","position":{"start":{"line":4,"column":1,"offset":37},"end":{"line":13,"column":21,"offset":308},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Python code without line numbers.","position":{"start":{"line":15,"column":1,"offset":310},"end":{"line":15,"column":34,"offset":343},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":310},"end":{"line":15,"column":34,"offset":343},"indent":[]}},{"type":"jsx","value":"<CodeHighlight language=\"python\">{`print(\"Hello World!\")`}</CodeHighlight>","position":{"start":{"line":17,"column":1,"offset":345},"end":{"line":17,"column":75,"offset":419},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Post with code snippets\",\"published_at\":\"2021-03-04T00:00:00.000Z\",\"tags\":[\"code\"]}","position":{"start":{"line":20,"column":1,"offset":422},"end":{"line":20,"column":122,"offset":543},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":20,"column":122,"offset":543}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Post with code snippets\",\n  \"published_at\": \"2021-03-04T00:00:00.000Z\",\n  \"tags\": [\"code\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar CodeHighlight = makeShortcode(\"CodeHighlight\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"JavaScript code with line numbers.\"), mdx(CodeHighlight, {\n    language: \"javascript\",\n    showLineNumbers: true,\n    mdxType: \"CodeHighlight\"\n  }, \"result.data.allFile.nodes.forEach((node) => {\\n  actions.createPage({\\n    path: node.fields.path,\\n    component: require.resolve(\\\"./src/templates/post.js\\\"),\\n    context: { id: node.id },\\n  })\\n})\"), mdx(\"p\", null, \"Python code without line numbers.\"), mdx(CodeHighlight, {\n    language: \"python\",\n    mdxType: \"CodeHighlight\"\n  }, \"print(\\\"Hello World!\\\")\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Post with code snippets\",\n  \"published_at\": \"2021-03-04T00:00:00.000Z\",\n  \"tags\": [\"code\"]\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst CodeHighlight = makeShortcode(\"CodeHighlight\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`JavaScript code with line numbers.`}</p>\n    <CodeHighlight language=\"javascript\" showLineNumbers mdxType=\"CodeHighlight\">{`result.data.allFile.nodes.forEach((node) => {\n  actions.createPage({\n    path: node.fields.path,\n    component: require.resolve(\"./src/templates/post.js\"),\n    context: { id: node.id },\n  })\n})`}</CodeHighlight>\n    <p>{`Python code without line numbers.`}</p>\n    <CodeHighlight language=\"python\" mdxType=\"CodeHighlight\">{`print(\"Hello World!\")`}</CodeHighlight>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}